/* automatically generated by rust-bindgen 0.59.2 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::useless_transmute)]
mod macros;
mod value;
pub use macros::*;
pub use value::*;

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub type va_list = __builtin_va_list;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type mrb_sym = u32;
pub type mrb_bool = u8;
pub type mrb_int = i64;
extern "C" {
    pub fn mrb_float_read(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
pub type mrb_float = f64;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mrb_vtype {
    MRB_TT_FALSE = 0,
    MRB_TT_TRUE = 1,
    MRB_TT_FLOAT = 2,
    MRB_TT_INTEGER = 3,
    MRB_TT_SYMBOL = 4,
    MRB_TT_UNDEF = 5,
    MRB_TT_CPTR = 6,
    MRB_TT_FREE = 7,
    MRB_TT_OBJECT = 8,
    MRB_TT_CLASS = 9,
    MRB_TT_MODULE = 10,
    MRB_TT_ICLASS = 11,
    MRB_TT_SCLASS = 12,
    MRB_TT_PROC = 13,
    MRB_TT_ARRAY = 14,
    MRB_TT_HASH = 15,
    MRB_TT_STRING = 16,
    MRB_TT_RANGE = 17,
    MRB_TT_EXCEPTION = 18,
    MRB_TT_ENV = 19,
    MRB_TT_DATA = 20,
    MRB_TT_FIBER = 21,
    MRB_TT_ISTRUCT = 22,
    MRB_TT_BREAK = 23,
    MRB_TT_MAXDEFINE = 24,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBasic {
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_RBasic() {
    assert_eq!(
        ::std::mem::size_of::<RBasic>(),
        24usize,
        concat!("Size of: ", stringify!(RBasic))
    );
    assert_eq!(
        ::std::mem::align_of::<RBasic>(),
        8usize,
        concat!("Alignment of ", stringify!(RBasic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBasic>())).c as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(RBasic), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBasic>())).gcnext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RBasic),
            "::",
            stringify!(gcnext)
        )
    );
}
impl RBasic {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RObject {
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub iv: *mut iv_tbl,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_RObject() {
    assert_eq!(
        ::std::mem::size_of::<RObject>(),
        32usize,
        concat!("Size of: ", stringify!(RObject))
    );
    assert_eq!(
        ::std::mem::align_of::<RObject>(),
        8usize,
        concat!("Alignment of ", stringify!(RObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RObject>())).c as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RObject>())).gcnext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RObject>())).iv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject),
            "::",
            stringify!(iv)
        )
    );
}
impl RObject {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RFiber {
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub cxt: *mut mrb_context,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_RFiber() {
    assert_eq!(
        ::std::mem::size_of::<RFiber>(),
        32usize,
        concat!("Size of: ", stringify!(RFiber))
    );
    assert_eq!(
        ::std::mem::align_of::<RFiber>(),
        8usize,
        concat!("Alignment of ", stringify!(RFiber))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RFiber>())).c as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(RFiber), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RFiber>())).gcnext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RFiber),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RFiber>())).cxt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RFiber),
            "::",
            stringify!(cxt)
        )
    );
}
impl RFiber {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCptr {
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub p: *mut ::std::os::raw::c_void,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_RCptr() {
    assert_eq!(
        ::std::mem::size_of::<RCptr>(),
        32usize,
        concat!("Size of: ", stringify!(RCptr))
    );
    assert_eq!(
        ::std::mem::align_of::<RCptr>(),
        8usize,
        concat!("Alignment of ", stringify!(RCptr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCptr>())).c as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(RCptr), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCptr>())).gcnext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RCptr),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCptr>())).p as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(RCptr), "::", stringify!(p))
    );
}
impl RCptr {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RFloat {
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub f: mrb_float,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_RFloat() {
    assert_eq!(
        ::std::mem::size_of::<RFloat>(),
        32usize,
        concat!("Size of: ", stringify!(RFloat))
    );
    assert_eq!(
        ::std::mem::align_of::<RFloat>(),
        8usize,
        concat!("Alignment of ", stringify!(RFloat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RFloat>())).c as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(RFloat), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RFloat>())).gcnext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RFloat),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RFloat>())).f as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(RFloat), "::", stringify!(f))
    );
}
impl RFloat {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RInteger {
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub i: mrb_int,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_RInteger() {
    assert_eq!(
        ::std::mem::size_of::<RInteger>(),
        32usize,
        concat!("Size of: ", stringify!(RInteger))
    );
    assert_eq!(
        ::std::mem::align_of::<RInteger>(),
        8usize,
        concat!("Alignment of ", stringify!(RInteger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RInteger>())).c as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RInteger),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RInteger>())).gcnext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RInteger),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RInteger>())).i as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RInteger),
            "::",
            stringify!(i)
        )
    );
}
impl RInteger {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_value {
    pub w: usize,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_mrb_value() {
    assert_eq!(
        ::std::mem::size_of::<mrb_value>(),
        8usize,
        concat!("Size of: ", stringify!(mrb_value))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_value>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mrb_value_ {
    pub p: *mut ::std::os::raw::c_void,
    pub __anon_1: mrb_value___bindgen_ty_1,
    pub bp: *mut RBasic,
    pub fp: *mut RFloat,
    pub ip: *mut RInteger,
    pub vp: *mut RCptr,
    pub w: usize,
    pub value: mrb_value,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_value___bindgen_ty_1 {
    pub sym_flag: u32,
    pub sym: mrb_sym,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_mrb_value___bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mrb_value___bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(mrb_value___bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_value___bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(mrb_value___bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_value___bindgen_ty_1>())).sym_flag as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value___bindgen_ty_1),
            "::",
            stringify!(sym_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value___bindgen_ty_1>())).sym as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value___bindgen_ty_1),
            "::",
            stringify!(sym)
        )
    );
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_mrb_value_() {
    assert_eq!(
        ::std::mem::size_of::<mrb_value_>(),
        8usize,
        concat!("Size of: ", stringify!(mrb_value_))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_value_>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_value_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value_>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value_),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value_>())).bp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value_),
            "::",
            stringify!(bp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value_>())).fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value_),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value_>())).ip as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value_),
            "::",
            stringify!(ip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value_>())).vp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value_),
            "::",
            stringify!(vp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value_>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value_),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value_>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value_),
            "::",
            stringify!(value)
        )
    );
}
extern "C" {
    pub fn mrb_word_boxing_cptr_value(
        arg1: *mut mrb_state,
        arg2: *mut ::std::os::raw::c_void,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_word_boxing_float_value(arg1: *mut mrb_state, arg2: mrb_float) -> mrb_value;
}
extern "C" {
    pub fn mrb_word_boxing_int_value(arg1: *mut mrb_state, arg2: mrb_int) -> mrb_value;
}
pub type mrb_ssize = mrb_int;
pub type mrb_each_object_callback = ::std::option::Option<
    unsafe extern "C" fn(
        mrb: *mut mrb_state,
        obj: *mut RBasic,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn mrb_objspace_each_objects(
        mrb: *mut mrb_state,
        callback: mrb_each_object_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn mrb_objspace_page_slot_size() -> usize;
}
extern "C" {
    pub fn mrb_free_context(mrb: *mut mrb_state, c: *mut mrb_context);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mrb_gc_state {
    MRB_GC_STATE_ROOT = 0,
    MRB_GC_STATE_MARK = 1,
    MRB_GC_STATE_SWEEP = 2,
}
#[repr(C)]
#[derive(Debug)]
pub struct mrb_heap_page {
    pub freelist: *mut RBasic,
    pub prev: *mut mrb_heap_page,
    pub next: *mut mrb_heap_page,
    pub free_next: *mut mrb_heap_page,
    pub free_prev: *mut mrb_heap_page,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub objects: __IncompleteArrayField<*mut ::std::os::raw::c_void>,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_mrb_heap_page() {
    assert_eq!(
        ::std::mem::size_of::<mrb_heap_page>(),
        48usize,
        concat!("Size of: ", stringify!(mrb_heap_page))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_heap_page>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_heap_page))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_heap_page>())).freelist as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_heap_page),
            "::",
            stringify!(freelist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_heap_page>())).prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_heap_page),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_heap_page>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_heap_page),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_heap_page>())).free_next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_heap_page),
            "::",
            stringify!(free_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_heap_page>())).free_prev as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_heap_page),
            "::",
            stringify!(free_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_heap_page>())).objects as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_heap_page),
            "::",
            stringify!(objects)
        )
    );
}
impl mrb_heap_page {
    #[inline]
    pub fn old(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_old(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(old: mrb_bool) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let old: u8 = unsafe { ::std::mem::transmute(old) };
            old as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_gc {
    pub heaps: *mut mrb_heap_page,
    pub sweeps: *mut mrb_heap_page,
    pub free_heaps: *mut mrb_heap_page,
    pub live: usize,
    pub arena: *mut *mut RBasic,
    pub arena_capa: ::std::os::raw::c_int,
    pub arena_idx: ::std::os::raw::c_int,
    pub state: mrb_gc_state,
    pub current_white_part: ::std::os::raw::c_int,
    pub gray_list: *mut RBasic,
    pub atomic_gray_list: *mut RBasic,
    pub live_after_mark: usize,
    pub threshold: usize,
    pub interval_ratio: ::std::os::raw::c_int,
    pub step_ratio: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub majorgc_old_threshold: usize,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_mrb_gc() {
    assert_eq!(
        ::std::mem::size_of::<mrb_gc>(),
        112usize,
        concat!("Size of: ", stringify!(mrb_gc))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_gc>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_gc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).heaps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(heaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).sweeps as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(sweeps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).free_heaps as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(free_heaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).live as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(live)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).arena as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).arena_capa as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(arena_capa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).arena_idx as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(arena_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).state as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).current_white_part as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(current_white_part)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).gray_list as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(gray_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).atomic_gray_list as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(atomic_gray_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).live_after_mark as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(live_after_mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).threshold as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(threshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).interval_ratio as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(interval_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).step_ratio as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(step_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).majorgc_old_threshold as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(majorgc_old_threshold)
        )
    );
}
impl mrb_gc {
    #[inline]
    pub fn iterating(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_iterating(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disabled(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_disabled(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn full(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_full(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn generational(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_generational(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn out_of_memory(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_out_of_memory(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        iterating: mrb_bool,
        disabled: mrb_bool,
        full: mrb_bool,
        generational: mrb_bool,
        out_of_memory: mrb_bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let iterating: u8 = unsafe { ::std::mem::transmute(iterating) };
            iterating as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let disabled: u8 = unsafe { ::std::mem::transmute(disabled) };
            disabled as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let full: u8 = unsafe { ::std::mem::transmute(full) };
            full as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let generational: u8 = unsafe { ::std::mem::transmute(generational) };
            generational as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let out_of_memory: u8 = unsafe { ::std::mem::transmute(out_of_memory) };
            out_of_memory as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn mrb_object_dead_p(mrb: *mut mrb_state, object: *mut RBasic) -> mrb_bool;
}
pub type mrb_code = u8;
pub type mrb_aspec = u32;
pub type mrb_allocf = ::std::option::Option<
    unsafe extern "C" fn(
        mrb: *mut mrb_state,
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        ud: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mrb_callinfo {
    pub mid: mrb_sym,
    pub argc: i16,
    pub acc: i16,
    pub proc_: *mut RProc,
    pub stack: *mut mrb_value,
    pub pc: *const mrb_code,
    pub u: mrb_callinfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mrb_callinfo__bindgen_ty_1 {
    pub env: *mut REnv,
    pub target_class: *mut RClass,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_mrb_callinfo__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mrb_callinfo__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(mrb_callinfo__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_callinfo__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_callinfo__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo__bindgen_ty_1>())).env as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo__bindgen_ty_1),
            "::",
            stringify!(env)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_callinfo__bindgen_ty_1>())).target_class as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo__bindgen_ty_1),
            "::",
            stringify!(target_class)
        )
    );
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_mrb_callinfo() {
    assert_eq!(
        ::std::mem::size_of::<mrb_callinfo>(),
        40usize,
        concat!("Size of: ", stringify!(mrb_callinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_callinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_callinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).mid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(mid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).argc as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).acc as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(acc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).proc_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(proc_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).stack as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).pc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).u as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(u)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mrb_fiber_state {
    MRB_FIBER_CREATED = 0,
    MRB_FIBER_RUNNING = 1,
    MRB_FIBER_RESUMED = 2,
    MRB_FIBER_SUSPENDED = 3,
    MRB_FIBER_TRANSFERRED = 4,
    MRB_FIBER_TERMINATED = 5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_context {
    pub prev: *mut mrb_context,
    pub stbase: *mut mrb_value,
    pub stend: *mut mrb_value,
    pub ci: *mut mrb_callinfo,
    pub cibase: *mut mrb_callinfo,
    pub ciend: *mut mrb_callinfo,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub fib: *mut RFiber,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_mrb_context() {
    assert_eq!(
        ::std::mem::size_of::<mrb_context>(),
        64usize,
        concat!("Size of: ", stringify!(mrb_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).stbase as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(stbase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).stend as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(stend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).ci as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(ci)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).cibase as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(cibase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).ciend as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(ciend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).fib as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(fib)
        )
    );
}
impl mrb_context {
    #[inline]
    pub fn status(&self) -> mrb_fiber_state {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_status(&mut self, val: mrb_fiber_state) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn vmexec(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_vmexec(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        status: mrb_fiber_state,
        vmexec: mrb_bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let status: u32 = unsafe { ::std::mem::transmute(status) };
            status as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let vmexec: u8 = unsafe { ::std::mem::transmute(vmexec) };
            vmexec as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mrb_func_t =
    ::std::option::Option<unsafe extern "C" fn(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value>;
pub type mrb_method_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_cache_entry {
    pub c: *mut RClass,
    pub c0: *mut RClass,
    pub mid: mrb_sym,
    pub m: mrb_method_t,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_mrb_cache_entry() {
    assert_eq!(
        ::std::mem::size_of::<mrb_cache_entry>(),
        32usize,
        concat!("Size of: ", stringify!(mrb_cache_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_cache_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_cache_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_cache_entry>())).c as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_cache_entry),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_cache_entry>())).c0 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_cache_entry),
            "::",
            stringify!(c0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_cache_entry>())).mid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_cache_entry),
            "::",
            stringify!(mid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_cache_entry>())).m as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_cache_entry),
            "::",
            stringify!(m)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_jmpbuf {
    _unused: [u8; 0],
}
pub type mrb_atexit_func = ::std::option::Option<unsafe extern "C" fn(arg1: *mut mrb_state)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_state {
    pub jmp: *mut mrb_jmpbuf,
    pub allocf: mrb_allocf,
    pub allocf_ud: *mut ::std::os::raw::c_void,
    pub c: *mut mrb_context,
    pub root_c: *mut mrb_context,
    pub globals: *mut iv_tbl,
    pub exc: *mut RObject,
    pub top_self: *mut RObject,
    pub object_class: *mut RClass,
    pub class_class: *mut RClass,
    pub module_class: *mut RClass,
    pub proc_class: *mut RClass,
    pub string_class: *mut RClass,
    pub array_class: *mut RClass,
    pub hash_class: *mut RClass,
    pub range_class: *mut RClass,
    pub float_class: *mut RClass,
    pub integer_class: *mut RClass,
    pub true_class: *mut RClass,
    pub false_class: *mut RClass,
    pub nil_class: *mut RClass,
    pub symbol_class: *mut RClass,
    pub kernel_module: *mut RClass,
    pub gc: mrb_gc,
    pub cache: [mrb_cache_entry; 256usize],
    pub symidx: mrb_sym,
    pub symtbl: *mut symbol_name,
    pub symhash: [mrb_sym; 256usize],
    pub symcapa: usize,
    pub symbuf: [::std::os::raw::c_char; 8usize],
    pub eException_class: *mut RClass,
    pub eStandardError_class: *mut RClass,
    pub nomem_err: *mut RObject,
    pub stack_err: *mut RObject,
    pub ud: *mut ::std::os::raw::c_void,
    pub atexit_stack: *mut mrb_atexit_func,
    pub atexit_stack_len: u16,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_mrb_state() {
    assert_eq!(
        ::std::mem::size_of::<mrb_state>(),
        9600usize,
        concat!("Size of: ", stringify!(mrb_state))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_state>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).jmp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(jmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).allocf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(allocf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).allocf_ud as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(allocf_ud)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).c as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).root_c as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(root_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).globals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(globals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).exc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(exc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).top_self as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(top_self)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).object_class as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(object_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).class_class as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(class_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).module_class as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(module_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).proc_class as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(proc_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).string_class as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(string_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).array_class as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(array_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).hash_class as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(hash_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).range_class as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(range_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).float_class as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(float_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).integer_class as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(integer_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).true_class as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(true_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).false_class as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(false_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).nil_class as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(nil_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symbol_class as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symbol_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).kernel_module as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(kernel_module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).gc as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).cache as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symidx as *const _ as usize },
        8488usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symtbl as *const _ as usize },
        8496usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symtbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symhash as *const _ as usize },
        8504usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symhash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symcapa as *const _ as usize },
        9528usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symcapa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symbuf as *const _ as usize },
        9536usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).eException_class as *const _ as usize },
        9544usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(eException_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).eStandardError_class as *const _ as usize },
        9552usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(eStandardError_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).nomem_err as *const _ as usize },
        9560usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(nomem_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).stack_err as *const _ as usize },
        9568usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(stack_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).ud as *const _ as usize },
        9576usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(ud)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).atexit_stack as *const _ as usize },
        9584usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(atexit_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).atexit_stack_len as *const _ as usize },
        9592usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(atexit_stack_len)
        )
    );
}
extern "C" {
    pub fn mrb_define_class(
        mrb: *mut mrb_state,
        name: *const ::std::os::raw::c_char,
        super_: *mut RClass,
    ) -> *mut RClass;
}
extern "C" {
    pub fn mrb_define_class_id(
        mrb: *mut mrb_state,
        name: mrb_sym,
        super_: *mut RClass,
    ) -> *mut RClass;
}
extern "C" {
    pub fn mrb_define_module(
        mrb: *mut mrb_state,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RClass;
}
extern "C" {
    pub fn mrb_define_module_id(mrb: *mut mrb_state, name: mrb_sym) -> *mut RClass;
}
extern "C" {
    pub fn mrb_singleton_class(mrb: *mut mrb_state, val: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_singleton_class_ptr(mrb: *mut mrb_state, val: mrb_value) -> *mut RClass;
}
extern "C" {
    pub fn mrb_include_module(mrb: *mut mrb_state, cla: *mut RClass, included: *mut RClass);
}
extern "C" {
    pub fn mrb_prepend_module(mrb: *mut mrb_state, cla: *mut RClass, prepended: *mut RClass);
}
extern "C" {
    pub fn mrb_define_method(
        mrb: *mut mrb_state,
        cla: *mut RClass,
        name: *const ::std::os::raw::c_char,
        func: mrb_func_t,
        aspec: mrb_aspec,
    );
}
extern "C" {
    pub fn mrb_define_method_id(
        mrb: *mut mrb_state,
        c: *mut RClass,
        mid: mrb_sym,
        func: mrb_func_t,
        aspec: mrb_aspec,
    );
}
extern "C" {
    pub fn mrb_define_class_method(
        mrb: *mut mrb_state,
        cla: *mut RClass,
        name: *const ::std::os::raw::c_char,
        fun: mrb_func_t,
        aspec: mrb_aspec,
    );
}
extern "C" {
    pub fn mrb_define_class_method_id(
        mrb: *mut mrb_state,
        cla: *mut RClass,
        name: mrb_sym,
        fun: mrb_func_t,
        aspec: mrb_aspec,
    );
}
extern "C" {
    pub fn mrb_define_singleton_method(
        mrb: *mut mrb_state,
        cla: *mut RObject,
        name: *const ::std::os::raw::c_char,
        fun: mrb_func_t,
        aspec: mrb_aspec,
    );
}
extern "C" {
    pub fn mrb_define_singleton_method_id(
        mrb: *mut mrb_state,
        cla: *mut RObject,
        name: mrb_sym,
        fun: mrb_func_t,
        aspec: mrb_aspec,
    );
}
extern "C" {
    pub fn mrb_define_module_function(
        mrb: *mut mrb_state,
        cla: *mut RClass,
        name: *const ::std::os::raw::c_char,
        fun: mrb_func_t,
        aspec: mrb_aspec,
    );
}
extern "C" {
    pub fn mrb_define_module_function_id(
        mrb: *mut mrb_state,
        cla: *mut RClass,
        name: mrb_sym,
        fun: mrb_func_t,
        aspec: mrb_aspec,
    );
}
extern "C" {
    pub fn mrb_define_const(
        mrb: *mut mrb_state,
        cla: *mut RClass,
        name: *const ::std::os::raw::c_char,
        val: mrb_value,
    );
}
extern "C" {
    pub fn mrb_define_const_id(
        mrb: *mut mrb_state,
        cla: *mut RClass,
        name: mrb_sym,
        val: mrb_value,
    );
}
extern "C" {
    pub fn mrb_undef_method(
        mrb: *mut mrb_state,
        cla: *mut RClass,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mrb_undef_method_id(arg1: *mut mrb_state, arg2: *mut RClass, arg3: mrb_sym);
}
extern "C" {
    pub fn mrb_undef_class_method(
        mrb: *mut mrb_state,
        cls: *mut RClass,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mrb_undef_class_method_id(mrb: *mut mrb_state, cls: *mut RClass, name: mrb_sym);
}
extern "C" {
    pub fn mrb_obj_new(
        mrb: *mut mrb_state,
        c: *mut RClass,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_class_new(mrb: *mut mrb_state, super_: *mut RClass) -> *mut RClass;
}
extern "C" {
    pub fn mrb_module_new(mrb: *mut mrb_state) -> *mut RClass;
}
extern "C" {
    pub fn mrb_class_defined(mrb: *mut mrb_state, name: *const ::std::os::raw::c_char) -> mrb_bool;
}
extern "C" {
    pub fn mrb_class_defined_id(mrb: *mut mrb_state, name: mrb_sym) -> mrb_bool;
}
extern "C" {
    pub fn mrb_class_get(mrb: *mut mrb_state, name: *const ::std::os::raw::c_char) -> *mut RClass;
}
extern "C" {
    pub fn mrb_class_get_id(mrb: *mut mrb_state, name: mrb_sym) -> *mut RClass;
}
extern "C" {
    pub fn mrb_exc_get_id(mrb: *mut mrb_state, name: mrb_sym) -> *mut RClass;
}
extern "C" {
    pub fn mrb_class_defined_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
    ) -> mrb_bool;
}
extern "C" {
    pub fn mrb_class_defined_under_id(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: mrb_sym,
    ) -> mrb_bool;
}
extern "C" {
    pub fn mrb_class_get_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RClass;
}
extern "C" {
    pub fn mrb_class_get_under_id(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: mrb_sym,
    ) -> *mut RClass;
}
extern "C" {
    pub fn mrb_module_get(mrb: *mut mrb_state, name: *const ::std::os::raw::c_char) -> *mut RClass;
}
extern "C" {
    pub fn mrb_module_get_id(mrb: *mut mrb_state, name: mrb_sym) -> *mut RClass;
}
extern "C" {
    pub fn mrb_module_get_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RClass;
}
extern "C" {
    pub fn mrb_module_get_under_id(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: mrb_sym,
    ) -> *mut RClass;
}
extern "C" {
    pub fn mrb_notimplement(arg1: *mut mrb_state);
}
extern "C" {
    pub fn mrb_notimplement_m(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_obj_dup(mrb: *mut mrb_state, obj: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_obj_respond_to(mrb: *mut mrb_state, c: *mut RClass, mid: mrb_sym) -> mrb_bool;
}
extern "C" {
    pub fn mrb_define_class_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
        super_: *mut RClass,
    ) -> *mut RClass;
}
extern "C" {
    pub fn mrb_define_class_under_id(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: mrb_sym,
        super_: *mut RClass,
    ) -> *mut RClass;
}
extern "C" {
    pub fn mrb_define_module_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RClass;
}
extern "C" {
    pub fn mrb_define_module_under_id(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: mrb_sym,
    ) -> *mut RClass;
}
pub type mrb_args_format = *const ::std::os::raw::c_char;
extern "C" {
    pub fn mrb_get_args(mrb: *mut mrb_state, format: mrb_args_format, ...) -> mrb_int;
}
extern "C" {
    pub fn mrb_get_argc(mrb: *mut mrb_state) -> mrb_int;
}
extern "C" {
    pub fn mrb_get_argv(mrb: *mut mrb_state) -> *const mrb_value;
}
extern "C" {
    pub fn mrb_get_arg1(mrb: *mut mrb_state) -> mrb_value;
}
extern "C" {
    pub fn mrb_funcall(
        mrb: *mut mrb_state,
        val: mrb_value,
        name: *const ::std::os::raw::c_char,
        argc: mrb_int,
        ...
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_funcall_id(
        mrb: *mut mrb_state,
        val: mrb_value,
        mid: mrb_sym,
        argc: mrb_int,
        ...
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_funcall_argv(
        mrb: *mut mrb_state,
        val: mrb_value,
        name: mrb_sym,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_funcall_with_block(
        mrb: *mut mrb_state,
        val: mrb_value,
        name: mrb_sym,
        argc: mrb_int,
        argv: *const mrb_value,
        block: mrb_value,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_intern_cstr(mrb: *mut mrb_state, str_: *const ::std::os::raw::c_char) -> mrb_sym;
}
extern "C" {
    pub fn mrb_intern(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> mrb_sym;
}
extern "C" {
    pub fn mrb_intern_static(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> mrb_sym;
}
extern "C" {
    pub fn mrb_intern_str(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_sym;
}
extern "C" {
    pub fn mrb_intern_check_cstr(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
    ) -> mrb_sym;
}
extern "C" {
    pub fn mrb_intern_check(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> mrb_sym;
}
extern "C" {
    pub fn mrb_intern_check_str(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_sym;
}
extern "C" {
    pub fn mrb_check_intern_cstr(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_check_intern(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_check_intern_str(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_sym_name(arg1: *mut mrb_state, arg2: mrb_sym) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrb_sym_name_len(
        arg1: *mut mrb_state,
        arg2: mrb_sym,
        arg3: *mut mrb_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrb_sym_dump(arg1: *mut mrb_state, arg2: mrb_sym) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrb_sym_str(arg1: *mut mrb_state, arg2: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_malloc(arg1: *mut mrb_state, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_calloc(
        arg1: *mut mrb_state,
        arg2: usize,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_realloc(
        arg1: *mut mrb_state,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_realloc_simple(
        arg1: *mut mrb_state,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_malloc_simple(arg1: *mut mrb_state, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_obj_alloc(arg1: *mut mrb_state, arg2: mrb_vtype, arg3: *mut RClass) -> *mut RBasic;
}
extern "C" {
    pub fn mrb_free(arg1: *mut mrb_state, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn mrb_str_new(
        mrb: *mut mrb_state,
        p: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_new_cstr(arg1: *mut mrb_state, arg2: *const ::std::os::raw::c_char)
        -> mrb_value;
}
extern "C" {
    pub fn mrb_str_new_static(
        mrb: *mut mrb_state,
        p: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_obj_freeze(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_open() -> *mut mrb_state;
}
extern "C" {
    pub fn mrb_open_allocf(f: mrb_allocf, ud: *mut ::std::os::raw::c_void) -> *mut mrb_state;
}
extern "C" {
    pub fn mrb_open_core(f: mrb_allocf, ud: *mut ::std::os::raw::c_void) -> *mut mrb_state;
}
extern "C" {
    pub fn mrb_close(mrb: *mut mrb_state);
}
extern "C" {
    pub fn mrb_default_allocf(
        arg1: *mut mrb_state,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_top_self(mrb: *mut mrb_state) -> mrb_value;
}
extern "C" {
    pub fn mrb_top_run(
        mrb: *mut mrb_state,
        proc_: *const RProc,
        self_: mrb_value,
        stack_keep: mrb_int,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_vm_run(
        mrb: *mut mrb_state,
        proc_: *const RProc,
        self_: mrb_value,
        stack_keep: mrb_int,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_vm_exec(
        mrb: *mut mrb_state,
        proc_: *const RProc,
        iseq: *const mrb_code,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_p(arg1: *mut mrb_state, arg2: mrb_value);
}
extern "C" {
    pub fn mrb_obj_id(obj: mrb_value) -> mrb_int;
}
extern "C" {
    pub fn mrb_obj_to_sym(mrb: *mut mrb_state, name: mrb_value) -> mrb_sym;
}
extern "C" {
    pub fn mrb_obj_eq(mrb: *mut mrb_state, a: mrb_value, b: mrb_value) -> mrb_bool;
}
extern "C" {
    pub fn mrb_obj_equal(mrb: *mut mrb_state, a: mrb_value, b: mrb_value) -> mrb_bool;
}
extern "C" {
    pub fn mrb_equal(mrb: *mut mrb_state, obj1: mrb_value, obj2: mrb_value) -> mrb_bool;
}
extern "C" {
    pub fn mrb_convert_to_integer(mrb: *mut mrb_state, val: mrb_value, base: mrb_int) -> mrb_value;
}
extern "C" {
    pub fn mrb_Integer(mrb: *mut mrb_state, val: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_Float(mrb: *mut mrb_state, val: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_inspect(mrb: *mut mrb_state, obj: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_eql(mrb: *mut mrb_state, obj1: mrb_value, obj2: mrb_value) -> mrb_bool;
}
extern "C" {
    pub fn mrb_cmp(mrb: *mut mrb_state, obj1: mrb_value, obj2: mrb_value) -> mrb_int;
}
extern "C" {
    pub fn mrb_garbage_collect(arg1: *mut mrb_state);
}
extern "C" {
    pub fn mrb_full_gc(arg1: *mut mrb_state);
}
extern "C" {
    pub fn mrb_incremental_gc(arg1: *mut mrb_state);
}
extern "C" {
    pub fn mrb_gc_mark(arg1: *mut mrb_state, arg2: *mut RBasic);
}
extern "C" {
    pub fn mrb_field_write_barrier(arg1: *mut mrb_state, arg2: *mut RBasic, arg3: *mut RBasic);
}
extern "C" {
    pub fn mrb_write_barrier(arg1: *mut mrb_state, arg2: *mut RBasic);
}
extern "C" {
    pub fn mrb_type_convert(
        mrb: *mut mrb_state,
        val: mrb_value,
        type_: mrb_vtype,
        method: mrb_sym,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_type_convert_check(
        mrb: *mut mrb_state,
        val: mrb_value,
        type_: mrb_vtype,
        method: mrb_sym,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_any_to_s(mrb: *mut mrb_state, obj: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_obj_classname(mrb: *mut mrb_state, obj: mrb_value) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrb_obj_class(mrb: *mut mrb_state, obj: mrb_value) -> *mut RClass;
}
extern "C" {
    pub fn mrb_class_path(mrb: *mut mrb_state, c: *mut RClass) -> mrb_value;
}
extern "C" {
    pub fn mrb_obj_is_kind_of(mrb: *mut mrb_state, obj: mrb_value, c: *mut RClass) -> mrb_bool;
}
extern "C" {
    pub fn mrb_obj_inspect(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_obj_clone(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_exc_new(
        mrb: *mut mrb_state,
        c: *mut RClass,
        ptr: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_exc_raise(mrb: *mut mrb_state, exc: mrb_value);
}
extern "C" {
    pub fn mrb_raise(mrb: *mut mrb_state, c: *mut RClass, msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn mrb_raisef(mrb: *mut mrb_state, c: *mut RClass, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn mrb_name_error(
        mrb: *mut mrb_state,
        id: mrb_sym,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn mrb_frozen_error(mrb: *mut mrb_state, frozen_obj: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn mrb_argnum_error(
        mrb: *mut mrb_state,
        argc: mrb_int,
        min: ::std::os::raw::c_int,
        max: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mrb_warn(mrb: *mut mrb_state, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn mrb_bug(mrb: *mut mrb_state, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn mrb_print_backtrace(mrb: *mut mrb_state);
}
extern "C" {
    pub fn mrb_print_error(mrb: *mut mrb_state);
}
extern "C" {
    pub fn mrb_vformat(
        mrb: *mut mrb_state,
        format: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_yield(mrb: *mut mrb_state, b: mrb_value, arg: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_yield_argv(
        mrb: *mut mrb_state,
        b: mrb_value,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_yield_with_class(
        mrb: *mut mrb_state,
        b: mrb_value,
        argc: mrb_int,
        argv: *const mrb_value,
        self_: mrb_value,
        c: *mut RClass,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_yield_cont(
        mrb: *mut mrb_state,
        b: mrb_value,
        self_: mrb_value,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_gc_protect(mrb: *mut mrb_state, obj: mrb_value);
}
extern "C" {
    pub fn mrb_gc_register(mrb: *mut mrb_state, obj: mrb_value);
}
extern "C" {
    pub fn mrb_gc_unregister(mrb: *mut mrb_state, obj: mrb_value);
}
extern "C" {
    pub fn mrb_to_int(mrb: *mut mrb_state, val: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_to_str(mrb: *mut mrb_state, val: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_check_type(mrb: *mut mrb_state, x: mrb_value, t: mrb_vtype);
}
extern "C" {
    pub fn mrb_define_alias(
        mrb: *mut mrb_state,
        c: *mut RClass,
        a: *const ::std::os::raw::c_char,
        b: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mrb_define_alias_id(mrb: *mut mrb_state, c: *mut RClass, a: mrb_sym, b: mrb_sym);
}
extern "C" {
    pub fn mrb_class_name(mrb: *mut mrb_state, klass: *mut RClass)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrb_define_global_const(
        mrb: *mut mrb_state,
        name: *const ::std::os::raw::c_char,
        val: mrb_value,
    );
}
extern "C" {
    pub fn mrb_attr_get(mrb: *mut mrb_state, obj: mrb_value, id: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_respond_to(mrb: *mut mrb_state, obj: mrb_value, mid: mrb_sym) -> mrb_bool;
}
extern "C" {
    pub fn mrb_obj_is_instance_of(mrb: *mut mrb_state, obj: mrb_value, c: *mut RClass) -> mrb_bool;
}
extern "C" {
    pub fn mrb_func_basic_p(
        mrb: *mut mrb_state,
        obj: mrb_value,
        mid: mrb_sym,
        func: mrb_func_t,
    ) -> mrb_bool;
}
extern "C" {
    pub fn mrb_fiber_resume(
        mrb: *mut mrb_state,
        fib: mrb_value,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_fiber_yield(mrb: *mut mrb_state, argc: mrb_int, argv: *const mrb_value)
        -> mrb_value;
}
extern "C" {
    pub fn mrb_fiber_alive_p(mrb: *mut mrb_state, fib: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_stack_extend(arg1: *mut mrb_state, arg2: mrb_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_pool {
    _unused: [u8; 0],
}
extern "C" {
    pub fn mrb_pool_open(arg1: *mut mrb_state) -> *mut mrb_pool;
}
extern "C" {
    pub fn mrb_pool_close(arg1: *mut mrb_pool);
}
extern "C" {
    pub fn mrb_pool_alloc(arg1: *mut mrb_pool, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_pool_realloc(
        arg1: *mut mrb_pool,
        arg2: *mut ::std::os::raw::c_void,
        oldlen: usize,
        newlen: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_pool_can_realloc(
        arg1: *mut mrb_pool,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> mrb_bool;
}
extern "C" {
    pub fn mrb_alloca(mrb: *mut mrb_state, arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_state_atexit(mrb: *mut mrb_state, func: mrb_atexit_func);
}
extern "C" {
    pub fn mrb_show_version(mrb: *mut mrb_state);
}
extern "C" {
    pub fn mrb_show_copyright(mrb: *mut mrb_state);
}
extern "C" {
    pub fn mrb_format(mrb: *mut mrb_state, format: *const ::std::os::raw::c_char, ...)
        -> mrb_value;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_shared_array {
    pub refcnt: ::std::os::raw::c_int,
    pub len: mrb_ssize,
    pub ptr: *mut mrb_value,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_mrb_shared_array() {
    assert_eq!(
        ::std::mem::size_of::<mrb_shared_array>(),
        24usize,
        concat!("Size of: ", stringify!(mrb_shared_array))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_shared_array>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_shared_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_shared_array>())).refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_shared_array),
            "::",
            stringify!(refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_shared_array>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_shared_array),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_shared_array>())).ptr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_shared_array),
            "::",
            stringify!(ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RArray {
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub as_: RArray__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RArray__bindgen_ty_1 {
    pub heap: RArray__bindgen_ty_1__bindgen_ty_1,
    pub ary: [mrb_value; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RArray__bindgen_ty_1__bindgen_ty_1 {
    pub len: mrb_ssize,
    pub aux: RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub ptr: *mut mrb_value,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub capa: mrb_ssize,
    pub shared: *mut mrb_shared_array,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).capa
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(capa)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).shared
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(shared)
        )
    );
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_RArray__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RArray__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RArray__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RArray__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1>())).len as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1>())).aux as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(aux)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1>())).ptr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_RArray__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RArray__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RArray__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RArray__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(RArray__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray__bindgen_ty_1>())).heap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray__bindgen_ty_1>())).ary as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1),
            "::",
            stringify!(ary)
        )
    );
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_RArray() {
    assert_eq!(
        ::std::mem::size_of::<RArray>(),
        48usize,
        concat!("Size of: ", stringify!(RArray))
    );
    assert_eq!(
        ::std::mem::align_of::<RArray>(),
        8usize,
        concat!("Alignment of ", stringify!(RArray))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray>())).c as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(RArray), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray>())).gcnext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray>())).as_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray),
            "::",
            stringify!(as_)
        )
    );
}
impl RArray {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn mrb_ary_decref(arg1: *mut mrb_state, arg2: *mut mrb_shared_array);
}
extern "C" {
    pub fn mrb_ary_modify(arg1: *mut mrb_state, arg2: *mut RArray);
}
extern "C" {
    pub fn mrb_ary_new_capa(arg1: *mut mrb_state, arg2: mrb_int) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_new(mrb: *mut mrb_state) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_new_from_values(
        mrb: *mut mrb_state,
        size: mrb_int,
        vals: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_assoc_new(mrb: *mut mrb_state, car: mrb_value, cdr: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_concat(mrb: *mut mrb_state, self_: mrb_value, other: mrb_value);
}
extern "C" {
    pub fn mrb_ary_splat(mrb: *mut mrb_state, value: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_push(mrb: *mut mrb_state, array: mrb_value, value: mrb_value);
}
extern "C" {
    pub fn mrb_ary_pop(mrb: *mut mrb_state, ary: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_ref(mrb: *mut mrb_state, ary: mrb_value, n: mrb_int) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_set(mrb: *mut mrb_state, ary: mrb_value, n: mrb_int, val: mrb_value);
}
extern "C" {
    pub fn mrb_ary_replace(mrb: *mut mrb_state, self_: mrb_value, other: mrb_value);
}
extern "C" {
    pub fn mrb_ensure_array_type(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_check_array_type(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_unshift(mrb: *mut mrb_state, self_: mrb_value, item: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_entry(ary: mrb_value, offset: mrb_int) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_splice(
        mrb: *mut mrb_state,
        self_: mrb_value,
        head: mrb_int,
        len: mrb_int,
        rpl: mrb_value,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_shift(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_clear(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_join(mrb: *mut mrb_state, ary: mrb_value, sep: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_resize(mrb: *mut mrb_state, ary: mrb_value, new_len: mrb_int) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_subseq(
        mrb: *mut mrb_state,
        ary: mrb_value,
        beg: mrb_int,
        len: mrb_int,
    ) -> mrb_value;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrbc_context {
    pub syms: *mut mrb_sym,
    pub slen: ::std::os::raw::c_int,
    pub filename: *mut ::std::os::raw::c_char,
    pub lineno: u16,
    pub partial_hook: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mrb_parser_state) -> ::std::os::raw::c_int,
    >,
    pub partial_data: *mut ::std::os::raw::c_void,
    pub target_class: *mut RClass,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub upper: *const RProc,
    pub parser_nerr: usize,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_mrbc_context() {
    assert_eq!(
        ::std::mem::size_of::<mrbc_context>(),
        80usize,
        concat!("Size of: ", stringify!(mrbc_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mrbc_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mrbc_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).syms as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(syms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).slen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(slen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).filename as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).lineno as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).partial_hook as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(partial_hook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).partial_data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(partial_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).target_class as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(target_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).upper as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(upper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).parser_nerr as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(parser_nerr)
        )
    );
}
impl mrbc_context {
    #[inline]
    pub fn capture_errors(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_capture_errors(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dump_result(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dump_result(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_exec(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_exec(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn keep_lv(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_keep_lv(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_optimize(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_optimize(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        capture_errors: mrb_bool,
        dump_result: mrb_bool,
        no_exec: mrb_bool,
        keep_lv: mrb_bool,
        no_optimize: mrb_bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let capture_errors: u8 = unsafe { ::std::mem::transmute(capture_errors) };
            capture_errors as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dump_result: u8 = unsafe { ::std::mem::transmute(dump_result) };
            dump_result as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let no_exec: u8 = unsafe { ::std::mem::transmute(no_exec) };
            no_exec as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let keep_lv: u8 = unsafe { ::std::mem::transmute(keep_lv) };
            keep_lv as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let no_optimize: u8 = unsafe { ::std::mem::transmute(no_optimize) };
            no_optimize as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn mrbc_context_new(mrb: *mut mrb_state) -> *mut mrbc_context;
}
extern "C" {
    pub fn mrbc_context_free(mrb: *mut mrb_state, cxt: *mut mrbc_context);
}
extern "C" {
    pub fn mrbc_filename(
        mrb: *mut mrb_state,
        c: *mut mrbc_context,
        s: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrbc_partial_hook(
        mrb: *mut mrb_state,
        c: *mut mrbc_context,
        partial_hook: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut mrb_parser_state) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn mrbc_cleanup_local_variables(mrb: *mut mrb_state, c: *mut mrbc_context);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_ast_node {
    pub car: *mut mrb_ast_node,
    pub cdr: *mut mrb_ast_node,
    pub lineno: u16,
    pub filename_index: u16,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_mrb_ast_node() {
    assert_eq!(
        ::std::mem::size_of::<mrb_ast_node>(),
        24usize,
        concat!("Size of: ", stringify!(mrb_ast_node))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_ast_node>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_ast_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_ast_node>())).car as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_ast_node),
            "::",
            stringify!(car)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_ast_node>())).cdr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_ast_node),
            "::",
            stringify!(cdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_ast_node>())).lineno as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_ast_node),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_ast_node>())).filename_index as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_ast_node),
            "::",
            stringify!(filename_index)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mrb_lex_state_enum {
    EXPR_BEG = 0,
    EXPR_END = 1,
    EXPR_ENDARG = 2,
    EXPR_ENDFN = 3,
    EXPR_ARG = 4,
    EXPR_CMDARG = 5,
    EXPR_MID = 6,
    EXPR_FNAME = 7,
    EXPR_DOT = 8,
    EXPR_CLASS = 9,
    EXPR_VALUE = 10,
    EXPR_MAX_STATE = 11,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_parser_message {
    pub lineno: u16,
    pub column: ::std::os::raw::c_int,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_mrb_parser_message() {
    assert_eq!(
        ::std::mem::size_of::<mrb_parser_message>(),
        16usize,
        concat!("Size of: ", stringify!(mrb_parser_message))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_parser_message>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_parser_message))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_message>())).lineno as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_message),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_message>())).column as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_message),
            "::",
            stringify!(column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_message>())).message as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_message),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_parser_state {
    pub mrb: *mut mrb_state,
    pub pool: *mut mrb_pool,
    pub cells: *mut mrb_ast_node,
    pub s: *const ::std::os::raw::c_char,
    pub send: *const ::std::os::raw::c_char,
    pub f: *mut FILE,
    pub cxt: *mut mrbc_context,
    pub filename_sym: mrb_sym,
    pub lineno: u16,
    pub column: ::std::os::raw::c_int,
    pub lstate: mrb_lex_state_enum,
    pub lex_strterm: *mut mrb_ast_node,
    pub cond_stack: ::std::os::raw::c_uint,
    pub cmdarg_stack: ::std::os::raw::c_uint,
    pub paren_nest: ::std::os::raw::c_int,
    pub lpar_beg: ::std::os::raw::c_int,
    pub in_def: ::std::os::raw::c_int,
    pub in_single: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub locals: *mut mrb_ast_node,
    pub pb: *mut mrb_ast_node,
    pub tokbuf: *mut ::std::os::raw::c_char,
    pub buf: [::std::os::raw::c_char; 256usize],
    pub tidx: ::std::os::raw::c_int,
    pub tsiz: ::std::os::raw::c_int,
    pub all_heredocs: *mut mrb_ast_node,
    pub heredocs_from_nextline: *mut mrb_ast_node,
    pub parsing_heredoc: *mut mrb_ast_node,
    pub lex_strterm_before_heredoc: *mut mrb_ast_node,
    pub ylval: *mut ::std::os::raw::c_void,
    pub nerr: usize,
    pub nwarn: usize,
    pub tree: *mut mrb_ast_node,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub upper: *const RProc,
    pub error_buffer: [mrb_parser_message; 10usize],
    pub warn_buffer: [mrb_parser_message; 10usize],
    pub filename_table: *mut mrb_sym,
    pub filename_table_length: u16,
    pub current_filename_index: u16,
    pub jmp: *mut mrb_jmpbuf,
    pub nvars: *mut mrb_ast_node,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_mrb_parser_state() {
    assert_eq!(
        ::std::mem::size_of::<mrb_parser_state>(),
        832usize,
        concat!("Size of: ", stringify!(mrb_parser_state))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_parser_state>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_parser_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).mrb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(mrb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).pool as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).cells as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(cells)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).s as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).send as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(send)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).f as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).cxt as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(cxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).filename_sym as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(filename_sym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).lineno as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).column as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).lstate as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).lex_strterm as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lex_strterm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).cond_stack as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(cond_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).cmdarg_stack as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(cmdarg_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).paren_nest as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(paren_nest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).lpar_beg as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lpar_beg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).in_def as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(in_def)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).in_single as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(in_single)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).locals as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(locals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).pb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(pb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).tokbuf as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(tokbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).buf as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).tidx as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(tidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).tsiz as *const _ as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(tsiz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).all_heredocs as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(all_heredocs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).heredocs_from_nextline as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(heredocs_from_nextline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).parsing_heredoc as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(parsing_heredoc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).lex_strterm_before_heredoc as *const _
                as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lex_strterm_before_heredoc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).ylval as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(ylval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).nerr as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(nerr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).nwarn as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(nwarn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).tree as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(tree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).upper as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(upper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).error_buffer as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(error_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).warn_buffer as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(warn_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).filename_table as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(filename_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).filename_table_length as *const _ as usize
        },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(filename_table_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).current_filename_index as *const _ as usize
        },
        810usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(current_filename_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).jmp as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(jmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).nvars as *const _ as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(nvars)
        )
    );
}
impl mrb_parser_state {
    #[inline]
    pub fn cmd_start(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cmd_start(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(cmd_start: mrb_bool) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let cmd_start: u8 = unsafe { ::std::mem::transmute(cmd_start) };
            cmd_start as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn no_optimize(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_optimize(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn capture_errors(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_capture_errors(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        no_optimize: mrb_bool,
        capture_errors: mrb_bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let no_optimize: u8 = unsafe { ::std::mem::transmute(no_optimize) };
            no_optimize as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let capture_errors: u8 = unsafe { ::std::mem::transmute(capture_errors) };
            capture_errors as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn mrb_parser_new(arg1: *mut mrb_state) -> *mut mrb_parser_state;
}
extern "C" {
    pub fn mrb_parser_free(arg1: *mut mrb_parser_state);
}
extern "C" {
    pub fn mrb_parser_parse(arg1: *mut mrb_parser_state, arg2: *mut mrbc_context);
}
extern "C" {
    pub fn mrb_parser_set_filename(
        arg1: *mut mrb_parser_state,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mrb_parser_get_filename(arg1: *mut mrb_parser_state, idx: u16) -> mrb_sym;
}
extern "C" {
    pub fn mrb_parse_file(
        arg1: *mut mrb_state,
        arg2: *mut FILE,
        arg3: *mut mrbc_context,
    ) -> *mut mrb_parser_state;
}
extern "C" {
    pub fn mrb_parse_string(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut mrbc_context,
    ) -> *mut mrb_parser_state;
}
extern "C" {
    pub fn mrb_parse_nstring(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mrbc_context,
    ) -> *mut mrb_parser_state;
}
extern "C" {
    pub fn mrb_generate_code(arg1: *mut mrb_state, arg2: *mut mrb_parser_state) -> *mut RProc;
}
extern "C" {
    pub fn mrb_load_exec(
        mrb: *mut mrb_state,
        p: *mut mrb_parser_state,
        c: *mut mrbc_context,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_load_file(arg1: *mut mrb_state, arg2: *mut FILE) -> mrb_value;
}
extern "C" {
    pub fn mrb_load_file_cxt(
        arg1: *mut mrb_state,
        arg2: *mut FILE,
        cxt: *mut mrbc_context,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_load_detect_file_cxt(
        mrb: *mut mrb_state,
        fp: *mut FILE,
        c: *mut mrbc_context,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_load_string(mrb: *mut mrb_state, s: *const ::std::os::raw::c_char) -> mrb_value;
}
extern "C" {
    pub fn mrb_load_nstring(
        mrb: *mut mrb_state,
        s: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_load_string_cxt(
        mrb: *mut mrb_state,
        s: *const ::std::os::raw::c_char,
        cxt: *mut mrbc_context,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_load_nstring_cxt(
        mrb: *mut mrb_state,
        s: *const ::std::os::raw::c_char,
        len: usize,
        cxt: *mut mrbc_context,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_sys_fail(mrb: *mut mrb_state, mesg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn mrb_exc_new_str(mrb: *mut mrb_state, c: *mut RClass, str_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_make_exception(
        mrb: *mut mrb_state,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_exc_backtrace(mrb: *mut mrb_state, exc: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_get_backtrace(mrb: *mut mrb_state) -> mrb_value;
}
extern "C" {
    pub fn mrb_no_method_error(
        mrb: *mut mrb_state,
        id: mrb_sym,
        args: mrb_value,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn mrb_f_raise(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBreak {
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub proc_: *const RProc,
    pub val: mrb_value,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_RBreak() {
    assert_eq!(
        ::std::mem::size_of::<RBreak>(),
        40usize,
        concat!("Size of: ", stringify!(RBreak))
    );
    assert_eq!(
        ::std::mem::align_of::<RBreak>(),
        8usize,
        concat!("Alignment of ", stringify!(RBreak))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBreak>())).c as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(RBreak), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBreak>())).gcnext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RBreak),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBreak>())).proc_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RBreak),
            "::",
            stringify!(proc_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBreak>())).val as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RBreak),
            "::",
            stringify!(val)
        )
    );
}
impl RBreak {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn mrb_protect(
        mrb: *mut mrb_state,
        body: mrb_func_t,
        data: mrb_value,
        state: *mut mrb_bool,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_ensure(
        mrb: *mut mrb_state,
        body: mrb_func_t,
        b_data: mrb_value,
        ensure: mrb_func_t,
        e_data: mrb_value,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_rescue(
        mrb: *mut mrb_state,
        body: mrb_func_t,
        b_data: mrb_value,
        rescue: mrb_func_t,
        r_data: mrb_value,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_rescue_exceptions(
        mrb: *mut mrb_state,
        body: mrb_func_t,
        b_data: mrb_value,
        rescue: mrb_func_t,
        r_data: mrb_value,
        len: mrb_int,
        classes: *mut *mut RClass,
    ) -> mrb_value;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RString {
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub as_: RString__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RString__bindgen_ty_1 {
    pub heap: RString__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RString__bindgen_ty_1__bindgen_ty_1 {
    pub len: mrb_ssize,
    pub aux: RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub ptr: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub capa: mrb_ssize,
    pub shared: *mut mrb_shared_string,
    pub fshared: *mut RString,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).capa
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(capa)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).shared
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).fshared
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(fshared)
        )
    );
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_RString__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RString__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RString__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RString__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1>())).len as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1>())).aux as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(aux)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1>())).ptr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_RString__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RString__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RString__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RString__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(RString__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RString__bindgen_ty_1>())).heap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1),
            "::",
            stringify!(heap)
        )
    );
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout_RString() {
    assert_eq!(
        ::std::mem::size_of::<RString>(),
        48usize,
        concat!("Size of: ", stringify!(RString))
    );
    assert_eq!(
        ::std::mem::align_of::<RString>(),
        8usize,
        concat!("Alignment of ", stringify!(RString))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RString>())).c as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RString>())).gcnext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RString),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RString>())).as_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RString),
            "::",
            stringify!(as_)
        )
    );
}
impl RString {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn mrb_str_strlen(arg1: *mut mrb_state, arg2: *mut RString) -> mrb_int;
}
extern "C" {
    pub fn mrb_gc_free_str(arg1: *mut mrb_state, arg2: *mut RString);
}
extern "C" {
    pub fn mrb_str_modify(mrb: *mut mrb_state, s: *mut RString);
}
extern "C" {
    pub fn mrb_str_modify_keep_ascii(mrb: *mut mrb_state, s: *mut RString);
}
extern "C" {
    pub fn mrb_str_index(
        mrb: *mut mrb_state,
        str_: mrb_value,
        p: *const ::std::os::raw::c_char,
        len: mrb_int,
        offset: mrb_int,
    ) -> mrb_int;
}
extern "C" {
    pub fn mrb_str_concat(mrb: *mut mrb_state, self_: mrb_value, other: mrb_value);
}
extern "C" {
    pub fn mrb_str_plus(mrb: *mut mrb_state, a: mrb_value, b: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_ptr_to_str(mrb: *mut mrb_state, p: *mut ::std::os::raw::c_void) -> mrb_value;
}
extern "C" {
    pub fn mrb_obj_as_string(mrb: *mut mrb_state, obj: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_resize(mrb: *mut mrb_state, str_: mrb_value, len: mrb_int) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_substr(
        mrb: *mut mrb_state,
        str_: mrb_value,
        beg: mrb_int,
        len: mrb_int,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_ensure_string_type(mrb: *mut mrb_state, str_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_check_string_type(mrb: *mut mrb_state, str_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_string_type(mrb: *mut mrb_state, str_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_new_capa(mrb: *mut mrb_state, capa: usize) -> mrb_value;
}
extern "C" {
    pub fn mrb_string_cstr(mrb: *mut mrb_state, str_: mrb_value) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrb_string_value_cstr(
        mrb: *mut mrb_state,
        str_: *mut mrb_value,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrb_string_value_ptr(
        mrb: *mut mrb_state,
        str_: mrb_value,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrb_string_value_len(mrb: *mut mrb_state, str_: mrb_value) -> mrb_int;
}
extern "C" {
    pub fn mrb_str_dup(mrb: *mut mrb_state, str_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_intern(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_to_inum(
        mrb: *mut mrb_state,
        str_: mrb_value,
        base: mrb_int,
        badcheck: mrb_bool,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_cstr_to_inum(
        mrb: *mut mrb_state,
        s: *const ::std::os::raw::c_char,
        base: mrb_int,
        badcheck: mrb_bool,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_to_dbl(mrb: *mut mrb_state, str_: mrb_value, badcheck: mrb_bool) -> f64;
}
extern "C" {
    pub fn mrb_cstr_to_dbl(
        mrb: *mut mrb_state,
        s: *const ::std::os::raw::c_char,
        badcheck: mrb_bool,
    ) -> f64;
}
extern "C" {
    pub fn mrb_str_equal(mrb: *mut mrb_state, str1: mrb_value, str2: mrb_value) -> mrb_bool;
}
extern "C" {
    pub fn mrb_str_cat(
        mrb: *mut mrb_state,
        str_: mrb_value,
        ptr: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_cat_cstr(
        mrb: *mut mrb_state,
        str_: mrb_value,
        ptr: *const ::std::os::raw::c_char,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_cat_str(mrb: *mut mrb_state, str_: mrb_value, str2: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_append(mrb: *mut mrb_state, str_: mrb_value, str2: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_cmp(
        mrb: *mut mrb_state,
        str1: mrb_value,
        str2: mrb_value,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrb_str_to_cstr(mrb: *mut mrb_state, str_: mrb_value) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrb_str_hash(mrb: *mut mrb_state, str_: mrb_value) -> u32;
}
extern "C" {
    pub fn mrb_str_dump(mrb: *mut mrb_state, str_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_inspect(mrb: *mut mrb_state, str_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_beg_len(str_len: mrb_int, begp: *mut mrb_int, lenp: *mut mrb_int) -> mrb_bool;
}
extern "C" {
    pub fn mrb_str_byte_subseq(
        mrb: *mut mrb_state,
        str_: mrb_value,
        beg: mrb_int,
        len: mrb_int,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_vm_special_get(arg1: *mut mrb_state, arg2: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_vm_special_set(arg1: *mut mrb_state, arg2: mrb_sym, arg3: mrb_value);
}
extern "C" {
    pub fn mrb_vm_cv_get(arg1: *mut mrb_state, arg2: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_vm_cv_set(arg1: *mut mrb_state, arg2: mrb_sym, arg3: mrb_value);
}
extern "C" {
    pub fn mrb_vm_const_get(arg1: *mut mrb_state, arg2: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_vm_const_set(arg1: *mut mrb_state, arg2: mrb_sym, arg3: mrb_value);
}
extern "C" {
    pub fn mrb_obj_iv_tbl_memsize(arg1: mrb_value) -> usize;
}
extern "C" {
    pub fn mrb_const_get(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_const_set(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_sym, arg4: mrb_value);
}
extern "C" {
    pub fn mrb_const_defined(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_sym) -> mrb_bool;
}
extern "C" {
    pub fn mrb_const_remove(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_sym);
}
extern "C" {
    pub fn mrb_iv_name_sym_p(mrb: *mut mrb_state, sym: mrb_sym) -> mrb_bool;
}
extern "C" {
    pub fn mrb_iv_name_sym_check(mrb: *mut mrb_state, sym: mrb_sym);
}
extern "C" {
    pub fn mrb_obj_iv_get(mrb: *mut mrb_state, obj: *mut RObject, sym: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_obj_iv_set(mrb: *mut mrb_state, obj: *mut RObject, sym: mrb_sym, v: mrb_value);
}
extern "C" {
    pub fn mrb_obj_iv_defined(mrb: *mut mrb_state, obj: *mut RObject, sym: mrb_sym) -> mrb_bool;
}
extern "C" {
    pub fn mrb_iv_get(mrb: *mut mrb_state, obj: mrb_value, sym: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_iv_set(mrb: *mut mrb_state, obj: mrb_value, sym: mrb_sym, v: mrb_value);
}
extern "C" {
    pub fn mrb_iv_defined(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_sym) -> mrb_bool;
}
extern "C" {
    pub fn mrb_iv_remove(mrb: *mut mrb_state, obj: mrb_value, sym: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_iv_copy(mrb: *mut mrb_state, dst: mrb_value, src: mrb_value);
}
extern "C" {
    pub fn mrb_const_defined_at(mrb: *mut mrb_state, mod_: mrb_value, id: mrb_sym) -> mrb_bool;
}
extern "C" {
    pub fn mrb_gv_get(mrb: *mut mrb_state, sym: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_gv_set(mrb: *mut mrb_state, sym: mrb_sym, val: mrb_value);
}
extern "C" {
    pub fn mrb_gv_remove(mrb: *mut mrb_state, sym: mrb_sym);
}
extern "C" {
    pub fn mrb_cv_get(mrb: *mut mrb_state, mod_: mrb_value, sym: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_mod_cv_set(mrb: *mut mrb_state, c: *mut RClass, sym: mrb_sym, v: mrb_value);
}
extern "C" {
    pub fn mrb_cv_set(mrb: *mut mrb_state, mod_: mrb_value, sym: mrb_sym, v: mrb_value);
}
extern "C" {
    pub fn mrb_cv_defined(mrb: *mut mrb_state, mod_: mrb_value, sym: mrb_sym) -> mrb_bool;
}
extern "C" {
    pub fn mrb_obj_iv_inspect(arg1: *mut mrb_state, arg2: *mut RObject) -> mrb_value;
}
extern "C" {
    pub fn mrb_obj_iv_set_force(mrb: *mut mrb_state, obj: *mut RObject, sym: mrb_sym, v: mrb_value);
}
extern "C" {
    pub fn mrb_mod_constants(mrb: *mut mrb_state, mod_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_f_global_variables(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_obj_instance_variables(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_mod_class_variables(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_mod_cv_get(mrb: *mut mrb_state, c: *mut RClass, sym: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_mod_cv_defined(mrb: *mut mrb_state, c: *mut RClass, sym: mrb_sym) -> mrb_bool;
}
extern "C" {
    pub fn mrb_ident_p(s: *const ::std::os::raw::c_char, len: mrb_int) -> mrb_bool;
}
extern "C" {
    pub fn mrb_gc_mark_gv(arg1: *mut mrb_state);
}
extern "C" {
    pub fn mrb_gc_free_gv(arg1: *mut mrb_state);
}
extern "C" {
    pub fn mrb_gc_mark_iv(arg1: *mut mrb_state, arg2: *mut RObject);
}
extern "C" {
    pub fn mrb_gc_mark_iv_size(arg1: *mut mrb_state, arg2: *mut RObject) -> usize;
}
extern "C" {
    pub fn mrb_gc_free_iv(arg1: *mut mrb_state, arg2: *mut RObject);
}
pub type mrb_iv_foreach_func = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut mrb_state,
        arg2: mrb_sym,
        arg3: mrb_value,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn mrb_iv_foreach(
        mrb: *mut mrb_state,
        obj: mrb_value,
        func: mrb_iv_foreach_func,
        p: *mut ::std::os::raw::c_void,
    );
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
#[allow(deref_nullptr)]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RClass {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_tbl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RProc {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct REnv {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symbol_name {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_shared_string {
    pub _address: u8,
}
